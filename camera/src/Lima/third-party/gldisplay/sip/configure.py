############################################################################
# This file is part of gldisplay, a submodule of LImA project the
# Library for Image Acquisition
#
# Copyright (C) : 2009-2011
# European Synchrotron Radiation Facility
# BP 220, Grenoble 38043
# FRANCE
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
############################################################################
import os
import glob
import sipconfig
import shutil
import numpy

# get sip version
sip_version = sipconfig.Configuration().sip_version
str_version = sipconfig.version_to_string(sip_version)
versions = [int(x) for x in str_version.split('.')]
major, minor = versions[0], versions[1]

src_file = ('gldisplay_before_4_12.sip' if major == 4 and minor < 12 else
            'gldisplay.sip')
shutil.copyfile(src_file, 'gldisplay_tmp.sip')

exclude_sipfile = set()

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = 'gldisplay.sbf'
config = sipconfig.Configuration()

# Platform
plat = 'POSIX_PLATFORM'

# Run SIP to generate the code.
# module's specification files using the -I flag.
cmd = ' '.join([config.sip_bin, '-g', '-e', '-c', '.', '-t', plat,
                '-b', build_file, 'gldisplay_tmp.sip'])
print cmd
os.system(cmd)

build_file = 'gldisplay.sbf'

#little HACK for adding source
bfile = open(build_file)
whole_file = ''
for line in bfile :
    if 'sources' in line :
         begin,end = line.split('=')
         line = '%s = gldisplay_init_numpy.cpp %s' % (begin,end)
    whole_file += line
bfile.close()
bfile = open(build_file,'w')
bfile.write(whole_file)
bfile.close()

# We are going to install the SIP specification file for this module and
# its configuration module.
installs = []

installs.append(['gldisplay.sip', 
		 os.path.join(config.default_sip_dir, 'gldisplay')])

installs.append(['gldisplayconfig.py', config.default_mod_dir])

# Create the Makefile.  The QtModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
makefile = sipconfig.ModuleMakefile(
    configuration=config,
    build_file=build_file,
    installs=installs,
)

LIMA = os.path.join('..', '..' , '..')
PROCESSLIB = os.path.join(LIMA, 'third-party', 'Processlib')
QTDIR = os.environ.get('QTDIR')

makefile.extra_include_dirs = [os.path.join('..', 'include'),
			       os.path.join(LIMA, 'common', 'include'),
			       os.path.join(LIMA, 'hardware', 'include'),
			       os.path.join(LIMA, 'control', 'include'),
			       os.path.join(PROCESSLIB, 'core', 'include')]
makefile.extra_cxxflags = ['-pthread', '-I' + numpy.get_include(), '-g']
makefile.extra_libs = ['pthread', 'gldisplay', 'limacore', 'processlib',
		       'QtCore', 'QtGui', 'QtOpenGL', 'GL']
makefile.extra_lib_dirs = [os.path.join('..', 'build'), 
			   os.path.join(LIMA, 'build'),
			   os.path.join(PROCESSLIB, 'build'),
			   os.path.join(QTDIR, 'lib')]

# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the 'lib' prefix on UNIX, or the
# '.dll' extension on Windows).
# None (for me)

# Generate the Makefile itself.
makefile.generate()

# Now we create the configuration module.  This is done by merging a Python
# dictionary (whose values are normally determined dynamically) with a
# (static) template.
content = {
    # Publish where the SIP specifications for this module will be
    # installed.
    'gldisplay_sip_dir':    config.default_sip_dir
}

# This creates the pixmaptoolsconfig.py module from the pixmaptoolsconfig.py.in
# template and the dictionary.
sipconfig.create_config_module('gldisplayconfig.py', 'gldisplayconfig.py.in', content)

